swagger: '2.0'
info:
  version: 1.0.0
  title: SEOgenie Swagger
  description: >-
    SEOgenie REST Specification 
  termsOfService: 'http://swagger.io/terms/'
  contact:
    name: seogenie API Team
  license:
    name: Private
host: locahost
basePath: /api
schemes:
  - https
consumes:
  - application/json
produces:
  - application/json
  
tags:
  - name: Auth
  - name: Users
  - name: Pages
  - name: Keywords
  - name: Sites

paths:
  /account/login:
    post:
      tags: 
        - Auth
      description: Login to the System
      summary: Login to SEOgenie System
      operationId: getUserToken
      parameters:
        - in: body
          name: credential
          description: Login Data
          required: true
          schema:
            $ref: '#/definitions/credential'
      responses:
        '200':
          description: Login Successfull
          schema:
            $ref: '#/definitions/loginResponse'
        default:
          description: Error
          schema:
            $ref: '#/definitions/error'
  /account/register:
    post:
      tags: 
        - Auth
      description: Register new account to the System
      summary: Register new account to SEOgenie System
      operationId: registerUser
      parameters:
        - in: body
          name: credential
          description: Register Data
          required: true
          schema:
            $ref: '#/definitions/credential'
      responses:
        '200':
          description: Signup Successfull
          schema:
            $ref: '#/definitions/loginResponse'
        default:
          description: Error
          schema:
            $ref: '#/definitions/error'
  /account/confirm:
    post:
      tags: 
        - Auth
      description: Send confirmation code
      summary: Send confirmation code
      operationId: confirmRegister
      parameters:
        - name: confirmData
          in: body
          description: Confirmation Data
          required: true
          schema:
            $ref: '#/definitions/confirmData'
      responses:
        '200':
          description: Signup Successfull
          schema:
            $ref: '#/definitions/loginResponse'
        default:
          description: Error
          schema:
            $ref: '#/definitions/error'
  /sites:
    get:
      tags: 
        - Sites
      description: Returns user's sites
      operationId: getUserSites
      produces:
        - application/json
      parameters:
        - name: userId
          in: query
          description: User id to return
          required: true
          type: string
      responses:
        '200':
          description: Succesffully retrieved users sites
          schema:
            $ref: '#/definitions/site'
        '400':
          description: Invalid user Id supplied
        '404':
          description: No User with provided Id was found.
    post:
      tags: 
        - Sites
      description: Add new Site to the System
      summary: Add Customer's Site to the System
      parameters:
        - in: body
          name: body
          description: Site sata
          required: true
          schema:
            $ref: '#/definitions/site'
      responses:
        '200':
          description: Successfully added new site
          schema:
            $ref: '#/definitions/apiResponse'
        default:
          description: Error
          schema:
            $ref: '#/definitions/error'
  /sites/checkSite:
    get:
      tags: 
        - Sites
      description: Verify Site availability
      operationId: checkSite
      produces:
        - application/json
      responses:
        '200':
          description: Site or page exist & returns proper response
          schema:
            $ref: '#/definitions/apiResponse'
        '400':
          description: No sites found.
        '404':
          description: No Sites Found.
        default:
          description: Error
          schema:
            $ref: '#/definitions/error'
  /keywords:
    get:
      tags: 
        - Keywords
      description: Returns all keywords from the system that the user has access to
      operationId: getKeywords
      summary: Get all keywords for User's Site
      produces:
        - application/json
      parameters:
        - name: siteId
          in: query
          description: Site Id of needed site
          required: true
          type: string
      responses:
        '200':
          description: A list of Keywords.
          schema:
            type: array
            items:
              $ref: '#/definitions/keyword'
    post:
      tags: 
        - Keywords
      description: Add new Keyword to the System
      operationId: createKeyword
      summary: Add new Keyword to the System
      parameters:
        - in: body
          name: keyword
          description: Keyword Data
          required: true
          schema:
            $ref: '#/definitions/keyword'
      responses:
        '200':
          description: Successfully added new keyword
          schema:
            $ref: '#/definitions/apiResponse'
        default:
          description: Error
          schema:
            $ref: '#/definitions/error'
  /keywords/{id}:
    put:
      tags: 
        - Keywords
      description: Update Keyword
      operationId: updateKeyword
      summary: Update Keyword
      parameters:
        - name: id
          in: path
          description: Keyword id to return
          required: true
          type: string
        - in: body
          name: keyword
          description: Keyword Data
          required: true
          schema:
            $ref: '#/definitions/keyword'
      responses:
        '200':
          description: Successfully updated keyword
          schema:
            $ref: '#/definitions/apiResponse'
        default:
          description: Error
          schema:
            $ref: '#/definitions/error'
    delete:
      tags: 
        - Keywords
      description: Delete Keyword
      summary: Delete Keyword
      parameters:
        - name: id
          in: path
          description: Keyword id to return
          required: true
          type: string
      responses:
        '200':
          description: Successfully deleted keyword
          schema:
            $ref: '#/definitions/apiResponse'
        default:
          description: Error
          schema:
            $ref: '#/definitions/error'
  /keywordCategory:
    get:
      tags: 
        - Keywords
      description: Returns all keyword properties from the system that the user has access to
      operationId: getKeywordCategory
      summary: Get all keyword properties for User's Site
      produces:
        - application/json
      responses:
        '200':
          description: A list of Keyword Properties.
          schema:
            type: array
            items:
              $ref: '#/definitions/keywordCategory'
  /pages:
    get:
      tags: 
        - Pages
      description: Get pages of specific site
      summary: Get pages of specific site
      operationId: getPages
      parameters:
        - name: siteId
          in: query
          description: Page Data
          required: true
          type: string
      responses:
        '200':
          description: Successfully added new page
          schema:
            type: array
            items:
              $ref: '#/definitions/page'
        default:
          description: Error
          schema:
            $ref: '#/definitions/error'
    post:
      tags: 
        - Pages
      description: Add new page to the System
      summary: Add new page to the System
      parameters:
        - in: body
          name: page
          description: Page Data
          required: true
          schema:
            $ref: '#/definitions/page'
      responses:
        '200':
          description: Successfully added new page
          schema:
            $ref: '#/definitions/apiResponse'
        default:
          description: Error
          schema:
            $ref: '#/definitions/error'

  /pages/{pageId}:
    get:
      description: fetch page data
      tags: 
        - Pages
      parameters:
        - name: pageId
          in: path
          description: Site Id of needed site
          required: true
          type: string
      responses:
        '200':
          description: Successfully updated page
          schema:
            $ref: '#/definitions/page'
    put:
      tags: 
        - Pages
      description: Update Page
      summary: Update Page
      parameters:
        - name: pageId
          in: path
          description: Site Id of needed site
          required: true
          type: string
        - in: body
          name: Page
          description: Keyword Data
          required: true
          schema:
            $ref: '#/definitions/page'
      responses:
        '200':
          description: Successfully updated page
          schema:
            $ref: '#/definitions/apiResponse'
        default:
          description: Error
          schema:
            $ref: '#/definitions/error'
    delete:
      tags: 
        - Pages
      parameters:
        - name: pageId
          in: path
          description: Site Id of needed site
          required: true
          type: string
      description: Delete Page from the system
      summary: Delete Page
      responses:
        '200':
          description: Successfully deleted page
          schema:
            $ref: '#/definitions/apiResponse'
        default:
          description: Error
          schema:
            $ref: '#/definitions/error'
  /page/{pageId}/violation:
    get:
      tags: 
        - Pages
      description: Returns violation status of the page
      operationId: getPageViolation
      summary: Get violations for page
      produces:
        - application/json
      parameters:
        - name: pageId
          in: path
          description: Page Id of needed page
          required: true
          type: string
      responses:
        '200':
          description: A list of page violation.
          schema:
            type: array
            items:
              $ref: '#/definitions/violation'
  /users:
    get:
      tags: 
        - Users
      description: Returns all System users
      operationId: getUsers
      produces:
        - application/json
      parameters: []
      responses:
        '200':
          description: User info
          schema:
            type: array
            items:
              $ref: '#/definitions/user'
        default:
          description: Error
          schema:
            $ref: '#/definitions/error'
  /users/{id}:
    get:
      tags: 
        - Users
      description: Returns user basic info
      operationId: getUserInfoById
      produces:
        - application/json
      parameters:
        - name: id
          in: path
          description: User id to return
          required: true
          type: string
      responses:
        '200':
          description: Succesffully retrieved user info
          schema:
            $ref: '#/definitions/user'
        '400':
          description: Invalid user Id supplied
        '404':
          description: No User with provided Id was found.
        default:
          description: Error
          schema:
            $ref: '#/definitions/error'
definitions:
  error:
    type: object
    required:
      - message
    properties:
      code:
        type: integer
        format: int64
      message:
        type: string
      fields:
        type: array
        items:
          type: string
  apiResponse:
    type: object
    properties:
      code:
        type: integer
        format: int32
      type:
        type: string
      message:
        type: string
  url:
    type: string
  credential:
    type: object
    required:
      - username
      - password
    properties:
      username:
        type: string
      password:
        type: string
  loginResponse:
    type: object
    required:
      - result
    properties:
      result:
        type: object
  confirmData:
    type: object
    required:
      - username
      - code
    properties:
      username:
        type: string
      code:
        type: string
  site:
    type: object
    required:
      - userId
      - url
      - name
    properties:
      userId:
        type: string
      url:
        type: string
      name:
        type: string
  keyword:
    type: object
    required:
      - id
      - text
    properties:
      id:
        type: string
      text:
        type: string
      googleRanking:
        type: number
      yahooRanking:
        type: number
      bingRanking:
        type: number
      isDefault:
        type: boolean
      isPromoted:
        type: boolean
      isMonitored:
        type: boolean
      isForced:
        type: boolean
      significance:
       type: number
      suitability:
       type: number
      activePages:
       type: number
      isAssigned:
        type: boolean
      propertyId:
        type: string
  keywordCategory:
    type: object
    required:
      - name
    properties:
      name:
        type: string
      group:
        type: string
  page:
    type: object
    required:
      - siteId
      - pageId
      - urls
    properties:
      siteId:
        type: string
      pageId:
        type: string
      name:
        type: string
      isDeleted:
        type: boolean
      isPromoted:
        type: boolean
      isAutoKeywords:
        type: boolean
      collectionName:
        type: string
      urls:
        type: array
        items:
          $ref: '#/definitions/url'
  violation:
    type: object
    required:
      - pageId
    properties:
      pageId:
        type: string
      status:
        type: string
  user:
    type: object
    required:
      - id
      - email
      - firstName
      - lastName
    properties:
      id:
        type: string
      email:
        type: string
      firstName:
        type: string
      lastName:
        type: string